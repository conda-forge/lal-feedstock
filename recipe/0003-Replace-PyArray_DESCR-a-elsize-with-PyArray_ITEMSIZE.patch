From 64c5bc2f4d5c50c5807012b6cd6a2e89d3b09773 Mon Sep 17 00:00:00 2001
From: Leo Singer <leo.singer@ligo.org>
Date: Thu, 11 Apr 2024 21:12:42 -0400
Subject: [PATCH 3/5] Replace PyArray_DESCR(a)->elsize with PyArray_ITEMSIZE(a)

The PyArray_Descr struct has changed from Numpy 1.x to 2.
According to the [Numpy 2.0 migration guide](https://numpy.org/devdocs/numpy_2_0_migration_guide.html#the-pyarray-descr-struct-has-been-changed),
this is the recommended way to get the element size of an array.

(cherry picked from commit 26ffb3299032823a48385a56aa2c305bae582a76)
---
 lal/swig/SWIGPython.i | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/lal/swig/SWIGPython.i b/lal/swig/SWIGPython.i
index 101cb8381f..fcd863531b 100644
--- a/lal/swig/SWIGPython.i
+++ b/lal/swig/SWIGPython.i
@@ -648,15 +648,15 @@ SWIGINTERN bool swiglal_release_parent(void *ptr) {
 
     // Copy array element.
     if (src != NULL) {
-      memcpy(dst, src, PyArray_DESCR(nparr)->elsize);
+      memcpy(dst, src, PyArray_ITEMSIZE(nparr));
     }
 
     // Byte-swap array element, if required.
     if (swap) {
-      const size_t n = PyArray_DESCR(nparr)->elsize / 2;
+      const size_t n = PyArray_ITEMSIZE(nparr) / 2;
       char *a, *b, c;
       a = (char *)dst;
-      b = a + (PyArray_DESCR(nparr)->elsize-1);
+      b = a + (PyArray_ITEMSIZE(nparr)-1);
       for (size_t i = 0; i < n; i++) {
         c = *a;
         *a++ = *b;
@@ -709,7 +709,7 @@ SWIGINTERN bool swiglal_release_parent(void *ptr) {
 
     // Get the Python object wrapping the C array element.
     const bool copyobj = false;
-    const size_t esize = PyArray_DESCR(nparr)->elsize;
+    const size_t esize = PyArray_ITEMSIZE(nparr);
     const int tflags = 0;
     PyObject* parent = PyArray_BASE(nparr);
     return OUTCALL;
@@ -742,7 +742,7 @@ SWIGINTERN bool swiglal_release_parent(void *ptr) {
     const int tflags = isptr ? SWIG_POINTER_DISOWN : 0;
 
     // Set the C array element to the supplied Python object.
-    const size_t esize = PyArray_DESCR(nparr)->elsize;
+    const size_t esize = PyArray_ITEMSIZE(nparr);
     PyObject* parent = PyArray_BASE(nparr);
     int elemalloc = 0;
     int *pelemalloc = &elemalloc;
@@ -767,7 +767,7 @@ SWIGINTERN bool swiglal_release_parent(void *ptr) {
     assert(PyArray_DESCR(nptoarr) != NULL);
 
     // 'toarr' should be an array of pointers to PyObjects.
-    assert(PyArray_DESCR(nptoarr)->elsize == sizeof(PyObject*));
+    assert(PyArray_ITEMSIZE(nptoarr) == sizeof(PyObject*));
 
     // Loop over 'n' elements, and assign each element of 'toarr' the Python object wrapping the
     // corresponding element of 'fromarr'.
@@ -775,7 +775,7 @@ SWIGINTERN bool swiglal_release_parent(void *ptr) {
     PyObject** toelem = (PyObject**)to;
     while (--n >= 0) {
       *toelem = swiglal_py_array_objview_##ACFTYPE##_getitem(fromelem, fromarr);
-      fromelem += PyArray_DESCR(npfromarr)->elsize;
+      fromelem += PyArray_ITEMSIZE(npfromarr);
       ++toelem;
     }
 
-- 
2.39.2

