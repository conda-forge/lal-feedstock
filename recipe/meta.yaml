{% set name = "lal" %}
{% set version = "7.1.0" %}
{% set sha256 = "81f1df34b178893483c7ed4262d1ffe98be6110c94f94a4ba8a405f62dd349e9" %}

# define build number
{% set build = 1 %}

# default FFT implememntation to FFTW
{% set fft_impl = fft_impl or 'fftw' %}

# prefer FFTW builds over MKL using a build number offset
{% if fft_impl == 'fftw' %}
{% set build = build + 100 %}
{% endif %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: http://software.ligo.org/lscsoft/source/lalsuite/{{ name }}-{{ version }}.tar.xz
  sha256: {{ sha256 }}

build:
  ignore_run_exports:
    - blas
    # run_exports parsing for fftw is broken, so we ignore it
    # manually, for now
    - fftw
  number: {{ build }}
  skip: true  # [win]
  string: {{ fft_impl }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}

requirements:
  build:
    - {{ compiler('c') }}
    - pkg-config >=0.18.0
    - make
    - bc
    - swig >=3.0.7
  host:
    - fftw * nompi*  # [fft_impl == "fftw"]
    - gsl
    - hdf5
    - mkl-devel {{ mkl }}  # [fft_impl == "mkl"]
    - zlib
  run:
    - fftw  # [fft_impl == "fftw"]
    - gsl
    - hdf5
    - zlib

test:
  requires:
    - pkg-config
  commands:
    - lal_version --verbose
    - lal_simd_detect
    - test "$(pkg-config --modversion ${PKG_NAME})" == "${PKG_VERSION}"  # [unix]

outputs:
  - name: lal
    build:
      run_exports:
        - {{ pin_subpackage("lal", max_pin="x") }}

  - name: python-lal
    script: install-python.sh
    build:
      ignore_run_exports:
        - python
      string: {{ fft_impl }}_py{{ py }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
    requirements:
      build:
        - {{ compiler('c') }}
        - make
        - pkg-config >=0.18.0
        - swig >=3.0.7
      host:
        - gsl
        - {{ pin_subpackage('lal', exact=True) }}
        - mkl-devel {{ mkl }}  # [fft_impl == "mkl"]
        - numpy
        - python
      run:
        # NOTE: on linux, python-lal links the LAL dependencies
        #       as well so we have to list them here. why this
        #       doesn't happen on osx, I'm not sure.
        - fftw  # [linux and fft_impl == "fftw"]
        - gsl
        - hdf5  # [linux]
        - {{ pin_subpackage('lal', exact=True) }}
        - ligo-segments
        - lscsoft-glue
        - mkl  # [fft_impl == "mkl"]
        - {{ pin_compatible('numpy') }}
        - python
        - python-dateutil
        - python-ligo-lw
        - scipy
        - six
        - zlib  # [linux]
    test:
      imports:
        - lal
        - lal.antenna
        - lal.gpstime
        - lal.rate
        - lal.series
        - lal.utils
      requires:
        - freezegun
        - pytest >4.0.0a0
      source_files:
        - test/python
      commands:
        - pushd test/python; python -m pytest -v; popd
    about:
      home: https://wiki.ligo.org/Computing/LALSuite
      doc_url: https://lscsoft.docs.ligo.org/lalsuite/lal/
      dev_url: https://git.ligo.org/lscsoft/lalsuite/
      license: GPL-2.0-or-later
      license_family: GPL
      license_file: COPYING
      summary: LSC Algorithm Library
      description: |
        The LSC Algorithm Library for gravitational wave data analysis.
        This package contains the Python bindings.

about:
  home: https://wiki.ligo.org/Computing/LALSuite
  doc_url: https://lscsoft.docs.ligo.org/lalsuite/lal/
  dev_url: https://git.ligo.org/lscsoft/lalsuite/
  license: GPL-2.0-or-later
  license_family: GPL
  license_file: COPYING
  summary: LSC Algorithm Library
  description: |
    The LSC Algorithm Library for gravitational wave data analysis.
    This package contains the shared-object libraries needed to run
    applications that use the LAL library.  If you want to install
    the Python bindings, please install the associated python-lal
    package.

extra:
  recipe-maintainers:
    - duncanmmacleod
    - skymoo
