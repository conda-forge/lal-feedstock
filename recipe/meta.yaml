{% set name = "lal" %}
{% set version = "7.6.0" %}

# define build number
{% set build = 2 %}

# default FFT implememntation to FFTW
{% if fft_impl is not defined %}
{% set fft_impl = "fftw" %}
{% endif %}

# prefer FFTW builds over MKL using a build number offset
{% if fft_impl == "fftw" %}
{% set build = build + 100 %}
{% endif %}

# dependency versions
{% set swig_version = "3.0.10" %}

# avoid circular imports that would break migrations
{% set migrating = False %}
{% set migrating = True %}  # [python_impl!='cpython' or py>=313]

package:
  name: {{ name }}-split
  version: {{ version }}

source:
  url: https://software.igwn.org/sources/source/lalsuite/{{ name }}-{{ version }}.tar.xz
  sha256: c173ff3112065706dc0ad1cc5062b32ae72a25de1a079bad9d198f657b82e463
  patches:
    # to update the patches for a new release:
    #
    #     # -- checkout the new source release tag
    #     cd /path/to/git/lalsuite
    #     git fetch
    #     git checkout <release-tag>
    #     # -- apply the patches on top of the release tag
    #     git am --3way /path/to/git/lal-feedstock/recipe/patches/*.patch
    #     <resolve-any-conflicts>
    #     # -- render new patch files
    #     git format-patch <release-tag> lal/ -o lal-patches
    #     # -- copy them back to the feedstock
    #     cd /path/to/git/lal-feedstock
    #     git rm recipe/patches/*.patch
    #     cp /path/to/git/lalsuite/lal-patches/*.patch recipe/patches/
    #     git add recipe/patches/*.patch
    #     <update-this-file-as-required>

    # see https://git.ligo.org/lscsoft/lalsuite/-/issues/300
    - patches/0001-lal-use-RTLD_DEEPBIND-when-importing-the-LAL-SWIG-li.patch  # [linux]
    # backport https://git.ligo.org/lscsoft/lalsuite/-/merge_requests/2364
    - patches/0002-common-swig-generate_swig_iface.py-prefer-stringval-.patch
    - patches/0003-lal-swig-SWIGCommon.i-refactor-SWIGLAL_MAYBE_RETURN_.patch
    - patches/0004-lal-swig-SWIGTestLALPython.py-use-catch_errors-wrapp.patch


build:
  error_overlinking: true
  ignore_run_exports:
    - blas
    # run_exports parsing for fftw is broken, so we ignore it
    # manually, for now
    - fftw
  number: {{ build }}
  skip: true  # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - pkg-config >=0.18.0
    - make
    - bc
    - swig >={{ swig_version }}
  host:
    - fftw * nompi*  # [fft_impl == "fftw"]
    - gsl
    - hdf5
    - mkl-devel {{ mkl }}  # [fft_impl == "mkl"]
    - zlib

outputs:
  - name: liblal
    script: install-lib.sh
    build:
      error_overlinking: true
      run_exports:
        - {{ pin_subpackage("liblal", max_pin="x") }}
      string: {{ fft_impl }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - make  # [not win]
        - swig >={{ swig_version }}
      host:
        - fftw * nompi*  # [fft_impl == "fftw"]
        - gsl
        - hdf5
        - mkl-devel {{ mkl }}  # [fft_impl == "mkl"]
        - zlib
      run:
        - fftw  # [fft_impl == "fftw"]
        - gsl
      run_constrained:
        # 7.1.1 is the version where the packages were restructured
        - lal >=7.1.1
        - python-lal >=7.1.1
    test:
      requires:
        - pkg-config
      commands:
        # check library
        - test -f ${PREFIX}/lib/liblal${SHLIB_EXT}  # [unix]
        - test -f ${PREFIX}/lib/liblalsupport${SHLIB_EXT}  # [unix]
        # check pkg-config
        - pkg-config --print-errors --exact-version "${PKG_VERSION}" lal
        - pkg-config --print-errors --exact-version "${PKG_VERSION}" lalsupport
    about:
      home: https://wiki.ligo.org/Computing/LALSuite
      doc_url: https://lscsoft.docs.ligo.org/lalsuite/lal/
      dev_url: https://git.ligo.org/lscsoft/lalsuite.git
      license: GPL-2.0-or-later
      license_file: COPYING
      summary: LSC Algorithm Library shared object libraries
      description: |
        The LSC Algorithm Library for gravitational wave data analysis.
        This package contains the shared-object libraries needed to run
        applications that use the LAL library.

  - name: python-lal
    script: build-python.sh
    build:
      error_overlinking: true
      ignore_run_exports:
        - libzlib
        # things we declare to help the solver, but don't actually need
        - mkl  # [fft_impl == "mkl"]
      string: {{ fft_impl }}_py{{ py }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - help2man >=1.37
        - make
        - pkg-config >=0.18.0
        - swig >={{ swig_version }}
        # extras for cross-compilation:
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - numpy                               # [build_platform != target_platform]
        - python                              # [build_platform != target_platform]
      host:
        - {{ pin_subpackage('liblal', exact=True) }}
        - numpy
        - pytest
        - python
        - six
        - zlib
        # extras to help the solver:
        - mkl-devel {{ mkl }}  # [fft_impl == "mkl"]
      run:
        # NOTE: on linux, python-lal links the LAL dependencies
        #       as well so we have to list them here. why this
        #       doesn't happen on osx, I'm not sure.
        - {{ pin_subpackage('liblal', exact=True) }}
        - ligo-segments
        - python
        - python-dateutil
        - scipy
    test:
      requires:
        - freezegun
        - lscsoft-glue
        - pytest >=4.0
        - python{% if not migrating %}-ligo-lw{% endif %}
      source_files:
        - test/python
      commands:
        - python -m pytest -ra -v test/python {% if migrating -%} --ignore test/python/test_rate.py -k 'not lal.rate and not lal.series' {%- endif %}
        # test regression for https://git.ligo.org/lscsoft/lalsuite/-/issues/478
        - python -c "import numpy; import lal; print(lal.CreateForwardREAL8FFTPlan(512, 1))"
    about:
      home: https://wiki.ligo.org/Computing/LALSuite
      doc_url: https://lscsoft.docs.ligo.org/lalsuite/lal/
      dev_url: https://git.ligo.org/lscsoft/lalsuite/
      license: GPL-2.0-or-later
      license_file: COPYING
      summary: LSC Algorithm Library Python bindings
      description: |
        The LSC Algorithm Library for gravitational wave data analysis.
        This package contains the Python bindings of the LAL C libraries
        and additional Python modules.

        Note: this package only provides the importable Python libraries.
        All command-line interfaces, scripts, and executables are
        part of the `lal` package.

  - name: lal
    script: install-bin.sh
    build:
      error_overlinking: true
      ignore_run_exports:
        # things we declare to help the solver, but don't actually need
        - mkl
      string: {{ fft_impl }}_py{{ py }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - help2man >=1.37
        - make
        - sed
      host:
        - fftw  # [fft_impl == "fftw"]
        - {{ pin_subpackage('liblal', exact=True) }}
        - ligo-segments
        - python
        - {{ pin_subpackage('python-lal', exact=True) }}
        # extras to help the solver:
        - mkl {{ mkl }}  # [fft_impl == "mkl"]
      run:
        - fftw  # [fft_impl == "fftw"]
        - {{ pin_subpackage('liblal', exact=True) }}
        - ligo-segments
        - numpy
        - python
        - {{ pin_subpackage('python-lal', exact=True) }}
        - python{% if not migrating %}-ligo-lw{% endif %}
    test:
      commands:
        - lal_fftw_wisdom --help  # [fft_impl == "fftw"]
        - lal_fftwf_wisdom --help  # [fft_impl == "fftw"]
        - lal_path2cache <<< A-B-0-1.gwf
        - "{% if not migrating %}lal_searchsum2cache --help{% else %}true{% endif %}"
        - lal_simd_detect
        - lal_version --verbose
        - test "$(lal_tconvert --rfc-2822 800000000)" == "Fri, 13 May 2005 06:13:07 +0000"  # [unix]
        - test "$(lal_tconvert Fri, 13 May 2005 06:13:07 +0000)" -eq 800000000  # [unix]
        - test "$(lal_tconvert 1831518865)" == "Tue Jan 19 03:14:07 UTC 2038"
        - test "$(lal_tconvert 1831518866)" == "Tue Jan 19 03:14:08 UTC 2038"
    about:
      home: https://wiki.ligo.org/Computing/LALSuite
      doc_url: https://lscsoft.docs.ligo.org/lalsuite/lal/
      dev_url: https://git.ligo.org/lscsoft/lalsuite/
      license: GPL-2.0-or-later
      license_file: COPYING
      summary: LSC Algorithm Library
      description: |
        The LSC Algorithm Library for gravitational wave data analysis.

about:
  home: https://wiki.ligo.org/Computing/LALSuite
  doc_url: https://lscsoft.docs.ligo.org/lalsuite/lal/
  dev_url: https://git.ligo.org/lscsoft/lalsuite/
  license: GPL-2.0-or-later
  license_file: COPYING
  summary: LSC Algorithm Library
  description: |
    The LSC Algorithm Library for gravitational wave data analysis.
    This package contains the shared-object libraries needed to run
    applications that use the LAL library.  If you want to install
    the Python bindings, please install the associated python-lal
    package.

extra:
  feedstock-name: lal
  recipe-maintainers:
    - duncanmmacleod
    - skymoo
